#summary A collection of 2D Turing Machine programs (Absolute Turmites)

<b>Table of Contents:</b>
<wiki:toc>

----

== Introduction ==

[http://en.wikipedia.org/wiki/Turing_machine Turing machines] operate on an infinite tape, extending out to infinity in each direction. The tape is divided into cells, each of which can contain a symbol from a finite alphabet. The Turing machine consists of a finite state machine that moves along the tape, reading and writing symbols.

One way to generalise this simple definition is to alter the tape on which the Turing machine inhabits. Since there is only one possible one-dimensional tape, this involves moving into two dimensions. Natural choices for the grid are the square and hexagonal lattices; triangular and Penrose tilings are more exotic.

Another way to generalise the definition is to give the read-write head an orientation, so it moves either _forwards_ or does a _U-turn_ first. We're calling these machines _relative_, since their movement choices are relative to their current orientation. By contrast therefore the standard definition Turing machines are _absolute_.

The majority of this article is concerned with Turing machines on a square grid, both absolute and relative. Relative-movement 2D Turing machines are popularly known as [http://en.wikipedia.org/wiki/Turmite Turmites].

== Background ==

Relative-movement Turing machines and 2D Turing machines have been investigated by many people over the years (both extensions are very obvious) but there are only a few papers:

  * Hartmanis, J. and Stearns, R. E. (1965) "On the Computational Complexity of Algorithms" Transactions of the American Mathematical Society, 117: 285-306.
    Pascal Michel [http://www.logique.jussieu.fr/~michel/ha#2d tells us] that this paper discusses 2D Turing machines. I haven't seen a copy myself.
  * Brady, Allen H. (1995) "The [http://en.wikipedia.org/wiki/Busy_beaver Busy Beaver] Game and the Meaning of Life". In: Herken, R. "The Universal Turing Machine: a half-century survey". [http://books.google.co.uk/books?id=YafIDVd1Z68C&lpg=PP1&ots=MZUbd8ijxj&dq=universal%20turing%20machine%20herken&pg=PA237#v=onepage&q=&f=false read it here] 
    He considered "!TurNing" machines (an independent invention of Turmites) and found 2-state 2-color machines that ran for 121 steps and printed 37 non-zero cells before halting. He did the same test on a triangular grid and found machines that took 171 steps and printed 39 non-zero cells before halting. He found 3-state 2-color triangular grid machines that took 1721 steps and printed 351 non-zero cells before halting.
  * Wolfram, S. (2002) "A New Kind of Science" 
    He has [http://www.wolframscience.com/nksonline/section-5.3 a section on 2D Turing machines].

== Make your own Turmites ==

=== Absolute movement ===

  * Run [http://ruletablerepository.googlecode.com/files/AbsoluteTurmites.zip AbsoluteTurmite-gen.py] in [http://golly.sourceforge.net Golly]. Copy-paste one of the absolute-movement specification strings, e.g.: `{{{1,'E',1},{1,'W',1}},{{1,'W',0},{1,'',0}}}`
  * Each machine is specified as a table of n_states rows by n_colors columns, written in (Western) reading order: the first row first, then then other rows. 
  * Each triple is {A,B,C} where A is the new color to write (0-(n_colors-1)), B is the direction to move in (North, South, East, West) or empty to halt, C is the new state to adopt (0-(n_colors-1)).
  * For example, the triple `{1,'S',3}` means: print a '1', move South, and adopt state 3.

=== Relative movement ===

  * Run [http://ruletablerepository.googlecode.com/files/single-Turmite-gen.py single-Turmite-gen.py] in [http://golly.sourceforge.net Golly] and copy-paste one of the relative-movement specification strings below into the text box. E.g. `{{{1,2,0},{0,8,0}}}`
  * It uses a similar notation as the other script. The difference is in how the direction is specified: 1=forward, 4=u-turn, 2=right, 8=left, 0=halt. 
  * For example, the triple `{1,2,3}` means: print a '1', turn right (and move forward), and adopt state 3.

== Busy Beavers ==

This is a list of the best known [http://en.wikipedia.org/wiki/Busy_beaver busy beavers]. If you find improvements then overwrite the below.

=== 2-state 2-color ===

The best Busy Beaver is specified by the rulestring:

`{{{1,'S',1},{1,'N',1}},{{1,'N',0},{1,'',1}}}`<br>

It takes 6 steps to halt, writing 4 non-zero cells.

This is equivalent to a 1D Busy Beaver.


(In 3D there's no improvement either. And thinking about it, it will be true in all higher dimensions too - there are only 3 moves to be specified so if the 2D case is no improvement over the 1D case then adding further dimensions won't help either. Busy Beavers need to go over their own tracks to really be effective - and from this perspective it's really a surprise that some of the 2D cases outperform the 1D cases. TJH)


With _relative 1D_ Turmites, the best 2-state 2-color Busy Beaver takes 13 steps and writes 4 non-zero cells: `{{{1,4,1},{1,0,0}},{{1,1,0},{0,1,1}}}` which _is_ an improvement. Allen H. Brady (in unpublished work) called these systems "Flippers" and discovered this Busy Beaver.


The best relative _2D_ Turmites take 121 steps `{{{1,8,0},{0,8,1}},{{1,0,0},{1,2,0}}}` and write 37 non-zero cells `{{{1,2,1},{1,1,0}},{{1,4,0},{1,0,0}}}` before halting. (Allen H. Brady's results from the paper.) 



=== 3-state 2-color ===

An exhaustive search returned the following Busy Beavers. The first holds the record for the longest time before halting; the second writes the most non-zero symbols on the tape:

`{{{1,'S',1},{1,'W',2}},{{0,'W',2},{0,'E',1}},{{1,'N',0},{1,'',1}}}`<br>
32 steps.<br>

`{{{1,'W',2},{1,'E',1}},{{1,'S',0},{1,'N',1}},{{1,'N',1},{1,'',1}}}`<br>
11 non-zero cells written.


Notice that these values are _higher_ than the best 1D Busy Beavers for these parameters: 21 steps, 6 non-zero cells. Is this true in general? (Obviously the n-dimensional values can never be lower than the (n-1)-dimensional values since the lower-dimensional turmite can always be embedded in the higher-dimensional space.)

(Will the 3D case outperform the 2D case?)


The best _relative 1D_ turmite takes 82 steps and writes 9 non-zero cells: `{{{1,1,1},{0,1,0}},{{1,4,0},{0,1,2}},{{1,1,0},{1,0,0}}}`

The best relative 2D turmite so far found is `{{{1,2,1},{1,1,0}},{{1,2,1},{1,2,2}},{{1,0,0},{1,1,0}}}` which takes 21790 steps and writes 2793 non-zero cells. If it is not the best, the best will take more than 100,000 steps or move more than 100 squares from the starting position. (These are both easily possible, just not yet explored.)

http://ruletablerepository.googlecode.com/files/RBB32.PNG

=== 2-state 3-color ===

In two states and three colours, things begin to get interesting. Universal computation becomes possible for 1D Turing machines, as demonstrated by Alex Smith and Stephen Wolfram for `{{{1,'E',1},{2,'W',0},{1,'W',0}},{{2,'W',0},{2,'E',1},{0,'E',0}}}`

An exhaustive search returned the following Busy Beavers for the absolute 2D case:

`{{{1,'S',1},{2,'N',1},{1,'',0}},{{2,'N',0},{2,'S',1},{1,'N',1}}}`<br>
38 steps.<br>

`{{{1,'N',1},{2,'W',1},{0,'E',0}},{{1,'S',0},{2,'N',1},{1,'',1}}}`<br>
10 non-zero cells written.

Notice that the 38 steps case is a 1D machine. However the 10 cells written case beats the 1D case (9 cells written).


The best _relative 1D_ turmite takes 223 steps and writes 19 non-zero cells: `{{{1,4,1},{0,1,0},{2,1,0}},{{2,1,0},{1,0,0},{1,1,0}}}`


The best relative _2D_ turmite will take at least 11367 steps and write 3326 non-zero cells: `{{{1,2,1},{1,1,0},{1,2,0}},{{1,8,1},{2,2,0},{1,0,0}}}`

http://ruletablerepository.googlecode.com/files/RBB23.PNG


=== 4-state 2-color ===

Absolute 2D Turmites again beat the 1D case in the space of 4-state 2-colour Turing machines, as shown by the following two examples:

`{{{1,'E',1},{0,'S',1}},{{1,'N',3},{1,'E',2}},{{0,'W',0},{1,'N',2}},{{1,'W',0},{0,'',0}}}`<br>
4632 steps<br>
`{{{1,'E',1},{0,'W',0}},{{1,'W',3},{1,'S',0}},{{1,'S',0},{1,'',0}},{{1,'W',2},{1,'N',3}}}`<br>
244 non-zero cells written.

These have not been verified by an exhaustive search, but are already far ahead of the 1D case (107 steps, 13 non-zero cells).

The best _1D relative_ turmite takes at least 48186 steps `{{{1,4,1},{1,1,0}},{{1,1,2},{0,1,0}},{{1,4,3},{0,1,3}},{{0,0,0},{1,4,0}}}` and writes 96 non-zero cells : `{{{1,4,1},{1,1,0}},{{1,1,2},{0,1,0}},{{1,1,0},{1,1,3}},{{1,0,0},{0,1,0}}}` (Allen H. Brady, unpublished). That's a pretty amazing leap from 107 steps, 13 cells! 

The best _2D_ relative turmite takes at least 29014 steps and writes 3202 cells `{{{1,8,1},{1,1,0}},{{1,8,1},{1,8,2}},{{1,2,3},{1,1,0}},{{0,1,0},{0,0,0}}}`

=== Beyond ===

For more states and colors than 2-3, 3-2, 4-2 and 2-4, the Busy Beavers are enormous. 

For example, here are two example 3,3 Turing machines, neither of which are record holders:

`{{{1,'N',1},{2,'S',2},{2,'S',1}},{{1,'W',2},{1,'N',1},{1,'',0}},{{1,'E',0},{0,'N',0},{0,'N',0}}}`<br>
9304 steps.<br>
`{{{2,'W',1},{1,'',0},{2,'E',1}},{{2,'W',2},{0,'E',1},{2,'S',1}},{{1,'E',0},{0,'N',0},{0,'N',0}}}`<br>
697 non-zero cells written.

These are just examples - the actual record holders will have to be at least as large as the 1D case for which the record is _[http://www.cse.unr.edu/~al/BusyBeaver.html large]_:<br>
`{{{1,'E',1},{2,'W',0},{1,'W',2}},{{0,'W',0},{2,'E',1},{1,'W',1}},{{1,'',0},{1,'E',0},{1,'E',2}}}`<br>
(119,112,334,170,342,540 steps, 374,676,383 non-zero cells written)

Here's the 3,3 1D machine described as [http://www.cse.unr.edu/~al/busybeaversurprise.html Surprise-In-A-Box]:<br>
`{{{1,'E',1},{2,'W',1},{1,'W',2}},{{1,'W',0},{2,'E',1},{1,'E',1}},{{0,'',0},{2,'W',0},{0,'W',2}}}`<br>
(I don't get the joke though (if there is one) - from a rough visual inspection it appears to count on each side (in different ways) and then halt. I don't know enough about 1D Busy Beavers to know whether this in itself is unusual or what. Any ideas? TJH)


=== General findings ===

It appears that relative Turmites in one and two dimensions are almost consistently as good, or better than, their absolute counterparts. For very small numbers of states and symbols, 1D and 2D Turmites perform equally well. However, when the number of states/symbols is increased, the 2D Turmites overtake the 1D Turmites.



== Searching for high entropy patterns ==

Wolfram says this of 2D Turing machines:

  _"For Turing machines with two or three possible states, only repetitive and nested behavior normally seem to occur. With four states, more complex behavior is possible, but it is still rather rare."_ [http://www.wolframscience.com/nksonline/page-184 (NKS, p.184)]
 
However there _are_ examples of complex 3-state 2-color 2D Turing machines. These below were located by a program searching for patterns with high [http://en.wikipedia.org/wiki/Entropy_%28information_theory%29 entropy]:


This pattern is seemingly random for 15.5 million timesteps, before making a repetitive highway:

`{{{0,'S',1},{1,'W',1}},{{1,'E',2},{1,'S',2}},{{1,'W',0},{0,'N',0}}}`<br>



This pattern expands at a logarithmic rate, and behaves quite unusually:

`{{{0,'N',2},{1,'S',1}},{{0,'E',0},{0,'S',0}},{{1,'W',1},{1,'N',2}}}`<br>

This pattern grows extremely slowly, so is perhaps doing some form of counting, but appears random. Here's an animation of the states progressing from 1E9 timesteps up to 100E9 timesteps (100 frames, each 1 billion timesteps):<br>

http://ruletablerepository.googlecode.com/files/AlienCounter.gif

This resembles a form of binary counter. However, it is not performing traditional binary counting, as long strings of '1' symbols are replaced with alternating '1's and '0's, instead of solid '0's. If the counter didn't produce extra lines, and just worked in one dimension, it would count like so:

{{{

1
01
11
101
011
111
0101
1101
1011
0111
1111
10101
01101
11101
01011
11011
10111
01111
11111
010101

}}}

Notice that there is 1 one-digit number, 2 two-digit numbers, 3 three-digit numbers, 5 four-digit numbers and 8 five-digit numbers. These correspond to the Fibonacci numbers, which means that it effectively counts in base-phi, where phi is the golden number. This is quite unexpected, as phi is an irrational number, so doesn't usually occur as the base for discrete counting.

However, occasionally a parallel side-branch is created. This makes the counting process less regular, as the branches interfere with each other.



== The examples in Wolfram's A New Kind of Science ==

3-state 2-color 2D Turing machine from NKOS [http://www.wolframscience.com/nksonline/page-184 p184]:<br>
states: 0=north, 1=SE, 2=SW<br>
colors: 0=white, 1=grey<br>
`{{{1,'E',2},{0,'E',1}},{{1,'W',0},{1,'N',1}},{{0,'S',1},{1,'N',0}}}`

Five 4-state 2-color 2D Turing machines from NKOS [http://www.wolframscience.com/nksonline/page-185 p185]:<br>
states: 0=north, 1=east, 2=south, 3=west<br>
colors: 0=white, 1=grey<br>
(a): `{{{1,'S',1},{0,'W',2}},{{1,'S',2},{1,'E',1}},{{1,'N',3},{0,'S',0}},{{0,'E',1},{0,'N',0}}}`<br>
(b): `{{{1,'E',3},{0,'N',0}},{{1,'W',2},{1,'S',1}},{{0,'N',0},{1,'S',1}},{{1,'E',1},{0,'S',0}}}`<br>
(c): `{{{1,'W',1},{0,'E',2}},{{0,'E',3},{1,'W',0}},{{0,'N',0},{0,'S',3}},{{1,'S',0},{1,'N',1}}}`<br>
(d): `{{{0,'E',3},{0,'W',1}},{{1,'N',0},{1,'N',3}},{{0,'W',1},{1,'S',2}},{{1,'S',2},{0,'E',1}}}`<br>
(e): `{{{1,'N',1},{0,'S',1}},{{1,'S',3},{0,'N',2}},{{1,'W',0},{1,'N',1}},{{1,'S',2},{0,'E',1}}}`

Wolfram devotes [http://www.wolframscience.com/nksonline/page-186 a page] to example (e)
and [http://www.wolframscience.com/nksonline/page-184 describes it] as: "one example where the behavior seems in many respects completely random." In fact, as I reported [http://forum.wolframscience.com/showthread.php?s=86e914a0e833e3ad447abfd576c8d0a8&threadid=1749 here] the pattern is periodic, with period 2,074,575 and dx=3953, dy=1912.

3-state 2-color 2D Turing machine from NKOS Notes, [http://www.wolframscience.com/nksonline/page-931 p931]:<br>
states: 0=north, 1=SE, 2=SW<br>
colors: 0=white, 1=grey<br>
`{{{1,'N',2},{1,'W',0}},{{0,'W',0},{1,'S',0}},{{1,'S',1},{0,'E',1}}}`