#summary A collection of 2D Turing Machine programs (Absolute Turmites)

<b>Table of Contents:</b>
<wiki:toc>

----

== Background ==
  * [http://en.wikipedia.org/wiki/Turing_machine Turing machines]
  * [http://www.wolframscience.com/nksonline/section-5.3 2D Turing machines]
  * [http://en.wikipedia.org/wiki/Busy_beaver Busy Beavers]
  * [http://en.wikipedia.org/wiki/Turmite Turmites]
  * Run [http://ruletablerepository.googlecode.com/files/AbsoluteTurmites.zip this script] in [http://golly.sourceforge.net Golly] and copy-paste one of the specification strings below into the text box. Each machine is specified as a table of n_states rows by n_colors columns, written in (Western) reading order: the first row first, then then other rows. Each triple is {A,B,C} where A is the new color to write (0-(n_colors-1)), B is the direction to move in (North, South, East, West) or empty to halt, C is the new state to adopt (0-(n_colors-1)).

== Busy Beavers ==

This is a list of the best known busy beavers. If you find improvements then overwrite the below.

=== Prior work ===

  * Brady, Allen H. (1995) "The Busy Beaver Game and the Meaning of Life". In: Herken, R. "The Universal Turing Machine: a half-century survey". [http://books.google.co.uk/books?id=YafIDVd1Z68C&printsec=frontcover&dq=universal+turing+machine+herken&source=bl&ots=MZUbd8ijxj&sig=peUdViEPp2MVwzYAGbRCXRd1qh4&hl=en&ei=0_ipS5_cLI300gShkfHJAQ&sa=X&oi=book_result&ct=result&resnum=1&ved=0CAYQ6AEwAA#v=onepage&q=&f=false read it here]

(If you know of any other work, please let us know!)

=== 2-state 2-color: ===
`{{{1,'S',1},{1,'N',1}},{{1,'N',0},{1,'',1}}}`<br>
6 steps, 4 non-zero cells written.

This is the same as the 1D Busy Beaver.

(In 3D there's no improvement either. And thinking about it, it will be true in all higher dimensions too - there are only 3 moves to be specified so if the 2D case is no improvement over the 1D case then adding further dimensions won't help either. Busy Beavers need to go over their own tracks to really be effective - and from this perspective it's really a surprise that some of the 2D cases outperform the 1D cases. TJH)

=== 3-state 2-color: ===
`{{{1,'S',1},{1,'W',2}},{{0,'W',2},{0,'E',1}},{{1,'N',0},{1,'',1}}}`<br>
32 steps.<br>
`{{{1,'W',2},{1,'E',1}},{{1,'S',0},{1,'N',1}},{{1,'N',1},{1,'',1}}}`<br>
11 non-zero cells written.

(Final result from exhaustive search, unless I had bugs.)

Notice that these values are _higher_ than the best 1D Busy Beavers for these parameters: 21 steps, 6 non-zero cells. Is this true in general? (Obviously the n-dimensional values can never be lower than the (n-1)-dimensional values since the lower-dimensional turmite can always be embedded in the higher-dimensional space.)

(Will the 3D case outperform the 2D case?)

=== 2-state 3-color: ===
`{{{1,'S',1},{2,'N',1},{1,'',0}},{{2,'N',0},{2,'S',1},{1,'N',1}}}`<br>
38 steps.<br>
`{{{1,'N',1},{2,'W',1},{0,'E',0}},{{1,'S',0},{2,'N',1},{1,'',1}}}`<br>
10 non-zero cells written.

Notice that the 38 steps case is a 1D machine. However the 10 cells written case beats the 1D case (6 cells written).

(Final result from exhaustive search, unless I had bugs.)

=== 3-state 3-color: ===
`{{{1,'N',1},{2,'S',2},{2,'S',1}},{{1,'W',2},{1,'N',1},{1,'',0}},{{1,'E',0},{0,'N',0},{0,'N',0}}}`<br>
9304 steps.<br>
`{{{2,'W',1},{1,'',0},{2,'E',1}},{{2,'W',2},{0,'E',1},{2,'S',1}},{{1,'E',0},{0,'N',0},{0,'N',0}}}`<br>
697 non-zero cells written.

These are just examples - the actual record holders will have to be at least as large as the 1D case for which the record is _[http://www.cse.unr.edu/~al/BusyBeaver.html large]_:<br>
`{{{1,'E',1},{2,'W',0},{1,'W',2}},{{0,'W',0},{2,'E',1},{1,'W',1}},{{1,'',0},{1,'E',0},{1,'E',2}}}`<br>
(119,112,334,170,342,540 steps, 374,676,383 non-zero cells written)

Here's the 1D machine described as [http://www.cse.unr.edu/~al/busybeaversurprise.html Surprise-In-A-Box]:<br>
`{{{1,'E',1},{2,'W',1},{1,'W',2}},{{1,'W',0},{2,'E',1},{1,'E',1}},{{0,'',0},{2,'W',0},{0,'W',2}}}`<br>
(I don't get the joke though (if there is one) - from a rough visual inspection it appears to count on each side (in different ways) and then halt. I don't know enough about 1D Busy Beavers to know whether this in itself is unusual or what. Any ideas? TJH)

=== 4-state 2-color: ===
`{{{1,'W',3},{1,'S',2}},{{1,'E',0},{1,'W',3}},{{0,'E',3},{1,'',0}},{{1,'S',1},{0,'N',0}}}`<br>
3603 steps, 168 non-zero cells written.

Again these are just preliminary results but already far ahead of the 1D case (107 steps, 13 non-zero cells).

== Searching for high entropy patterns ==

Wolfram says this of 2D Turing machines:

  _"For Turing machines with two or three possible states, only repetitive and nested behavior normally seem to occur. With four states, more complex behavior is possible, but it is still rather rare."_ [http://www.wolframscience.com/nksonline/page-184 (NKS, p.184)]
 
However there _are_ examples of complex 3-state 2-color 2D Turing machines. These below were located by a program searching for patterns with high [http://en.wikipedia.org/wiki/Entropy_%28information_theory%29 entropy]:

`{{{0,'S',1},{1,'W',1}},{{1,'E',2},{1,'S',2}},{{1,'W',0},{0,'N',0}}}`<br>
This pattern is seemingly random for 15.5 million timesteps, before making a repetitive highway.

`{{{0,'N',2},{1,'S',1}},{{0,'E',0},{0,'S',0}},{{1,'W',1},{1,'N',2}}}`<br>
This pattern grows extremely slowly, so is perhaps doing some form of counting, but appears random. Here's an animation of the states progressing from 1E9 timesteps up to 100E9 timesteps (100 frames, each 1 billion timesteps):<br>

http://ruletablerepository.googlecode.com/files/AlienCounter.gif

The pattern expands at a logarithmic rate, and resembles a binary counter. However, it is not performing traditional binary counting, as long strings of '1' symbols are replaced with alternating '1's and '0's, instead of solid '0's. If the counter didn't produce extra lines, and just worked in one dimension, it would count like so:

{{{

1
01
11
101
011
111
0101
1101
1011
0111
1111
10101
01101
11101
01011
11011
10111
01111
11111
010101

}}}

Notice that there is 1 one-digit number, 2 two-digit numbers, 3 three-digit numbers, 5 four-digit numbers and 8 five-digit numbers. These correspond to the Fibonacci numbers, which means that it effectively counts in base-phi, where phi is the golden number. This is quite unexpected, as phi is an irrational number, so doesn't usually occur as the base for discrete counting.

However, occasionally a parallel side-branch is created. This makes the counting process less regular, as the branches interfere with each other.

== The examples in Wolfram's A New Kind of Science ==

3-state 2-color 2D Turing machine from NKOS [http://www.wolframscience.com/nksonline/page-184 p184]:<br>
states: 0=north, 1=SE, 2=SW<br>
colors: 0=white, 1=grey<br>
`{{{1,'E',2},{0,'E',1}},{{1,'W',0},{1,'N',1}},{{0,'S',1},{1,'N',0}}}`

Five 4-state 2-color 2D Turing machines from NKOS [http://www.wolframscience.com/nksonline/page-185 p185]:<br>
states: 0=north, 1=east, 2=south, 3=west<br>
colors: 0=white, 1=grey<br>
(a): `{{{1,'S',1},{0,'W',2}},{{1,'S',2},{1,'E',1}},{{1,'N',3},{0,'S',0}},{{0,'E',1},{0,'N',0}}}`<br>
(b): `{{{1,'E',3},{0,'N',0}},{{1,'W',2},{1,'S',1}},{{0,'N',0},{1,'S',1}},{{1,'E',1},{0,'S',0}}}`<br>
(c): `{{{1,'W',1},{0,'E',2}},{{0,'E',3},{1,'W',0}},{{0,'N',0},{0,'S',3}},{{1,'S',0},{1,'N',1}}}`<br>
(d): `{{{0,'E',3},{0,'W',1}},{{1,'N',0},{1,'N',3}},{{0,'W',1},{1,'S',2}},{{1,'S',2},{0,'E',1}}}`<br>
(e): `{{{1,'N',1},{0,'S',1}},{{1,'S',3},{0,'N',2}},{{1,'W',0},{1,'N',1}},{{1,'S',2},{0,'E',1}}}`

Wolfram devotes [http://www.wolframscience.com/nksonline/page-186 a page] to example (e)
and [http://www.wolframscience.com/nksonline/page-184 describes it] as: "one example where the behavior seems in many respects completely random." In fact, as I reported [http://forum.wolframscience.com/showthread.php?s=86e914a0e833e3ad447abfd576c8d0a8&threadid=1749 here] the pattern is periodic, with period 2,074,575 and dx=3953, dy=1912.

3-state 2-color 2D Turing machine from NKOS Notes, [http://www.wolframscience.com/nksonline/page-931 p931]:<br>
states: 0=north, 1=SE, 2=SW<br>
colors: 0=white, 1=grey<br>
`{{{1,'N',2},{1,'W',0}},{{0,'W',0},{1,'S',0}},{{1,'S',1},{0,'E',1}}}`