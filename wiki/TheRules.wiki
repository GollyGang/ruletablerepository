#summary The rule tables in our repository.


<wiki:comment>
====================================================================
If you change this page, please update the Golly Access Point too!
====================================================================
http://code.google.com/p/ruletablerepository/wiki/GollyAccessPoint
====================================================================
</wiki:comment>


<p align="right">[http://code.google.com/p/ruletablerepository/source/list?path=/wiki/TheRules.wiki Detailed page changes]</p>

----

<h1>Contents:</h1>

<wiki:toc max_depth="2" />

----

= The Rule Tables: =

Here is a list of rule tables for simulating cellular automata in Golly:

== Von Neumann's CA and close variations ==

Von Neumann, famous for inventing parallel processing and the concept of storing data and instructions in the same tape, created the first cellular automaton in order to allow self-replication. Since then, Renato Nobili and Tim Hutton have successively augmented the rules to simplify the machines.

|| *year* || *rule* || *description* || *images* ||
|| late 1940's || [http://www.sq3.org.uk/files/JvN29.table JvN29.table] || John von Neumann's [http://en.wikipedia.org/wiki/Von_Neumann_universal_constructor original 29-state CA]. The rule is a complex UCC rule, it uses two types of signal, ordinary and special transmission, each working in the four cardinal directions and having quiescent and excited properties. The rule also has temporary states for construction. || http://ruletablerepository.googlecode.com/files/jvn29.PNG ||
|| 1994 ||  [http://www.sq3.org.uk/files/Nobili32.table Nobili32.table] || [http://www.pd.infn.it/~rnobili/au_cell/ Renato Nobili]'s extension of von Neumann's 29-state CA to allow easier crossing of wires, leading to simpler machines. Golly includes four configurations in this rule. Adam P. Goucher has built a [http://ruletablerepository.googlecode.com/files/linear-constructor.zip fast replicator], which only takes 2.08 million generations to replicate. [Nobili32 Read more...] ||  http://ruletablerepository.googlecode.com/files/nobili32.PNG ||
|| 2008 || [http://www.sq3.org.uk/files/Hutton32.table Hutton32.table] || This is a [http://www.sq3.org.uk/wiki.pl?ModJvN modification] of Nobili32 created by Tim Hutton to allow simpler construction and rotational symmetry. This enables the replicator to construct two copies, perpendicular to each other, so that the replicator grows like a binary tree. [Hutton32 Read more...] || http://ruletablerepository.googlecode.com/files/hutton32.PNG ||

== Codd's CA and descendents ==

Codd produced a CA that had far fewer states than Von Neumann's original 29-state rule, it also allowed rotational invariance. [CoddsDesign His design] for a self-replicating machine is much more complex, and Tim Hutton has only recently implemented it. Adam P. Goucher made [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Patterns/Other-Rules/Codd/Goucher-replicator.rle.gz a universal constructor] that replicates much faster. However, Goucher's machine is inferior to the Codd-Hutton machine, as it is incapable of computation.

|| 1968 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Codd.table Codd.table] || Edgar F. Codd's cellular automaton, which requires only eight states -- a significant reduction over JvN29. This is achieved in part by using a sheath to cover the signal wires, to remove the need for directional arrows. [http://www.addebook.com/it/uncategorized/cellular-automata_5471.html Codd's book.] [http://en.wikipedia.org/wiki/Codd%27s_cellular_automaton Wikipedia] || http://ruletablerepository.googlecode.com/files/codd.PNG ||
|| 1971 || [http://ruletablerepository.googlecode.com/files/Codd-ICRA.zip Codd-ICRA] || A team of Hungarian researchers modified Codd's rules ([http://www.inf.u-szeged.hu/actacybernetica/edb/vol03n2/pdf/Takacs_1977_ActaCybernetica.pdf paper]). Crossovers can be made with only nine cells, and gates can be constructed by passing 7-0 signals. This rule table is not the original ruleset, but rather the Codd-ICRA rule with TJH's safe sheathing transitions (see Codd2.table, below). There are three pattern files attached that demonstrate the advantages of the Codd-ICRA variant. || http://ruletablerepository.googlecode.com/files/codd-icra.PNG ||
|| 1973 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Devore.table Devore.table] || John Devore altered Codd's ruleset to allow for more compact machines. The main difference between Devore's and Codd's cellular automata is that Devore's allows 2x2 blocks of cells to behave like split devices, merge units or one-way diodes. With this rule, a much simpler crossing can be created. Golly has a functioning self-replicator in this ruleset: [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Patterns/Other-Rules/Codd/Devore/Devore-rep.rle Devore-rep.rle]. Additionally, Adam P. Goucher made another replicator that uses a weak form of run-length encoding to compress the size of the tape: [http://ruletablerepository.googlecode.com/files/D-compressed-replicator.gz D-compressed-replicator.gz]. However, he did not have access to the small crossing, so had to make a large, cumbersome one instead. || http://ruletablerepository.googlecode.com/files/devore.PNG ||
|| 2009 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Codd2.table Codd2.table] || It was recently realised that Codd's rule table required three extra transitions in order to be able to sheath large complex structures. With this rule, an implementation of Codd's self-replicating machine was created: [http://ruletablerepository.googlecode.com/files/Codd-self-rep.zip Codd-self-rep.zip (12MB)] (now contains the full tapes for self-rep!) In addition to this, [http://ruletablerepository.googlecode.com/files/Codd-linear-rep.zip a replicator] has been built in this rule that uses a repeater-emitter loop, similar to [Hutton32 Hutton's replicator]. It replicates in under one billion generations. || http://ruletablerepository.googlecode.com/files/codd2.PNG ||

== Self-replicating loops ==

Christopher Langton altered Codd's ruleset, removing the universality to allow simple self-replicating loops. Several rules have been made to either:

  * Re-introduce the computation/construction abilities. (Tempesti, Perrier)
  * Allow a further reduction in size (Byl-loop, Chou-Reggia-1, Chou-Reggia-2)
  * Simulate evolution and genetic mutation. (SDSR, Evoloop, Sexyloop)

|| 1984 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Langtons-Loops.table Langtons-Loops.table] || Chris G. Langton extended Codd's rules to allow a totally novel form of simple self-replicator - [http://en.wikipedia.org/wiki/Langton%27s_loops the loop]. This was based on a very simple element of Codd's CA - the periodic emitter. The instructions for extending and turning the pseudopod is simpler in Langton's loops than Codd's CA - it requires half as many pulses to extend and turn the arm. This comes at the expense of removing the ability for universal computation and construction. || http://ruletablerepository.googlecode.com/files/langtonsloops.PNG ||
|| 1989 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Byl-Loop.table Byl-Loop.table] || J. Byl managed to reduce the size of Langton's Loop. Whereas Langton's loop consists of an internal and external sheath, the Byl loop only requires an external sheath. This reduced the size of the replicator from 86 to just 12 live cells. || http://ruletablerepository.googlecode.com/files/bylloop.PNG ||
|| 1993 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Chou-Reggia-1.table Chou-Reggia-1.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Chou-Reggia-2.table Chou-Reggia-2.table] || A further reduction of Langton's Loops - down to just five cells. This is a modification of Byl's loop that doesn't even need an external sheath. However, the simplicity of it makes it difficult to identify it as a loop. || http://ruletablerepository.googlecode.com/files/choureggia.PNG ||
|| 1995 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Tempesti.table Tempesti.table] || Gianluca Tempesti's programmable loop that is capable of constructing various things inside itself  - for example the initials of Tempesti's group: "LSL". [http://carg2.epfl.ch/Teaching/GDCA/loops-thesis.pdf Tempesti's thesis.] || http://ruletablerepository.googlecode.com/files/tempesti.PNG ||
|| 1996 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Perrier.table Perrier.table] || Perrier added universal computation capabilities to Langton's loop by adding a program stack and an extensible data tape. || http://ruletablerepository.googlecode.com/files/perrier.PNG ||
|| 1998 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/SDSR-Loop.table SDSR-Loop.table] || Hiroki Sayama introduced a change to Langton's Loops that caused dead loops to disappear, allowing live ones to reproduce further. [http://necsi.org/postdocs/sayama/sdsr/movies/sdsr-dth.html Homepage.] || http://ruletablerepository.googlecode.com/files/sdsr.PNG ||
|| 1999 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Evoloop.table Evoloop.table] || Another loop from Sayama, that allows colliding loops to sometimes merge genetic content. Over time, smaller loops appear as these outcompete the larger ones. [http://necsi.org/postdocs/sayama/sdsr/movies/evol-rep.html Homepage.] || http://ruletablerepository.googlecode.com/files/evoloop.PNG ||
|| 2009 || [http://ruletablerepository.googlecode.com/files/GoucherLoops.zip Goucher's Loops] || A 24-state version of Langton's loops, that permits construction and computation universality, right turns as well as left turns, genome combination and competition. In this rule, smaller loops do not necessarily survive better; square loops are very fragile, whereas crosses are more resilient. || http://ruletablerepository.googlecode.com/files/goucherloops.PNG ||
|| 2010 || [http://ruletablerepository.googlecode.com/files/Bakker-Loop.zip Bakker loop] || Grant Bakker made a 7-state sheath-free loop with the interesting property of sending out 'runners' to start new colonies. His Java implementation is included in the zip. || http://ruletablerepository.googlecode.com/files/Bakker-Loop.png ||

== !WireWorld and derivatives ==

Brian Silverman's WireWorld rule is available here, together with some interesting modifications by Alan Tennant and Mark Jeronimus.

|| 1987 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/WireWorld.table WireWorld] || Brian Silverman's famous CA for electronic wiring. This uses four states and has a finite size. An impressive computer has been built that calculates 16-bit prime numbers. [WireWorld Read more...] || http://ruletablerepository.googlecode.com/files/wireworld.PNG ||
|| 2009 || [http://ruletablerepository.googlecode.com/files/old_WWEs.zip Extendable Wireworld rules (WWE, WWE2, WWEJ and WWEJ2)] || WWE and WWE2 were created by Alan Tennant and WWEJ and WWEJ2 by Mark Jeronimus. Unlike the original WireWorld rule, these rules support universal construction, replication and modification. This file includes a replicator by Adam P. Goucher, a simple pattern that draws the 'Golly' logo, some latches, a UCC programmed to calculate Fibonacci numbers and some other examples. || http://ruletablerepository.googlecode.com/files/wwe.PNG http://ruletablerepository.googlecode.com/files/wwe2.PNG http://img204.imageshack.us/img204/1049/wwej.png ||
|| 2010 || [http://with-logic.co.uk/CA/WWEJ3.zip WWEJ3] || WWEJ3 by Mark Jeronimus and Alan Tennant, coded by Mark Jeronimus, contains all the functionality of old WWEs with none of the compromises or bugs, and with only 17 states. || http://with-logic.co.uk/CA/WWEJ3.png ||
|| 2010 || [http://ruletablerepository.googlecode.com/files/WireWorldMarked1.01.zip WireWorldMarked] || A marked version of WireWorld. It supports six extra wire colors but no extra functionality. A marked version of the Quinapalus' Primes Computer is included. || http://ruletablerepository.googlecode.com/files/WireWorldMarked.png ||
|| 2009 || [http://with-logic.co.uk/CA/WSwitch.zip Switch CA] || WSwitch is a 5-state rule by Alan Tennant. The rule is loosly based on WireWorld. The construction of logic gates is not possible directly. Instead, 3 types of pulse dividers are possible. || http://ruletablerepository.googlecode.com/files/switch.PNG ||

== Other computation rules ==

This section comprises other rule tables, which facilitate universal computation. These support logic gates and storage devices easily, making them useful rules for testing logic circuits in a precise and efficient manner.

|| 1971 || [http://with-logic.co.uk/a/banks.zip Banks' rules] || [http://www.bottomlayer.com/bottom/banks/banks_commentary.htm Edwin Roger Banks] made various cellular automata that support universal computation. The first rule has a fixed size (and memory); the second allows memory expansion. The third rule uses the Moore neighborhood to reduce the number of states to just two. The fourth rule allows universal construction and replication. || http://ruletablerepository.googlecode.com/files/banks.PNG ||
|| 1986 || [http://ruletablerepository.googlecode.com/files/Serizawa.zip Serizawa] || A 3-state von Neumann neighborhood rule capable of universal computation and construction. The self-replicator has not yet been implemented in this rule as far as we know. || http://ruletablerepository.googlecode.com/files/Serizawa_thumbnail.gif ||
|| 2009 || [http://ruletablerepository.googlecode.com/files/MinskyCA.zip MRM CA] || A [http://www.igblan.free-online.co.uk/igblan/ca/camrm.html 4-state rule] made by Paul Chapman to support Minsky Register Machines, up to and including universal MRMs. Included with this rule table is a .colors file and a sample MRM. The supplied MRM, also by Paul Chapman, calculates the nth prime. Paul Chapman has also built MRMs in Life, but they are naturally much slower than the ones in this specialised rule. || http://ruletablerepository.googlecode.com/files/minsky.PNG ||

== Lattice gases ==

A lattice gas is a cellular automaton used specifically to simulate a gas. Whereas actual gases operate in a 3-dimensional continuous space, lattice gases use a 2-dimensional discrete space. Interestingly, most of the properties of actual gases can be observed in lattice gases.

|| 1973 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/HPP.table HPP.table] || The HPP lattice gas can be simulated in the Margolus rule, but [http://pages.cs.wisc.edu/~wylie/doc/PhD_thesis.pdf Brian Wylie] showed how to simulate it with 16 states and the von Neumann neighborhood. TJH added another 16 'reflection' states to allow the rule to function in a bounded, non-toroidal space. || http://ruletablerepository.googlecode.com/files/hpp.PNG ||
|| 1981 || [http://ruletablerepository.googlecode.com/files/DLA.zip Diffusion-limited aggregation] || [http://en.wikipedia.org/wiki/Diffusion-limited_aggregation Diffusion-limited aggregation] using the HPP lattice gas. This model was studied to simulate the fractal growth characterised by electrolysis of copper sulphate. || http://ruletablerepository.googlecode.com/files/dla.PNG ||
|| 2010 || [http://ruletablerepository.googlecode.com/files/Pressure.zip Pressure] || Pressure is a rule by Dean Hickerson, which is loosely based on gas particles exerting pressure on the walls of a chamber. || http://ruletablerepository.googlecode.com/files/Pressure_thumbnail.png ||

== Margolus neighborhood ==

The Margolus neighborhood is one of the simplest CA neighborhoods. A description of the rule can be found online, at [http://cell-auto.com/neighbourhood/margolus/ this website]. For each of the rules below, two different rule tables are supplied. One is the actual Margolus rule; the other is an emulation of it using a Moore neighborhood and extra states.

|| 1981 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/DLA-Margolus.table DLA-Margolus.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/DLA-Margolus-emulated.table DLA-Margolus-emulated.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/DLA-Margolus-emulated.colors DLA-Margolus-emulated.colors] || [http://en.wikipedia.org/wiki/Diffusion-limited_aggregation Diffusion-limited aggegation] in the Margolus neighborhood. || http://ruletablerepository.googlecode.com/files/dla2.PNG ||
|| 1982 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/BBM-Margolus.table BBM-Margolus.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/BBM-Margolus-emulated.table BBM-Margolus-emulated.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/BBM-Margolus-emulated.colors BBM-Margolus-emulated.colors] || Ed Fredkin's [http://en.wikipedia.org/wiki/Billiard-Ball_Computer Billiard Ball Model] in the Margolus neighborhood. || http://ruletablerepository.googlecode.com/files/bbm.PNG ||
|| 2009 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Sand-Margolus.table Sand-Margolus.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Sand-Margolus-emulated.table Sand-Margolus-emulated.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Sand-Margolus-emulated.colors Sand-Margolus-emulated.colors] || MCell's 'Sand' rule in the Margolus neighborhood. || http://ruletablerepository.googlecode.com/files/sand.PNG ||

== Hexagonal neighborhood ==

A number of people have explored various CA rules on a hexagonal grid, where each cell has 6 neighbors.  This neighborhood can be emulated on a square grid by ignoring 2 diagonally opposite neighbors (e.g., the NE and SW corners).

|| 1971 || [http://ruletablerepository.googlecode.com/files/Hex-B2omS2.zip Hex-B2omS2] || A 2-state non-totalistic CA on a hexagonal grid, by Ken Preston Jr.  This rule was first  described in [http://www.conwaylife.com/wiki/index.php?title=Lifeline_Volume_2 LifeLine number 2] on page 15.  The rule name uses Paul Callahan's notation (see below). || http://ruletablerepository.googlecode.com/files/Hex-B2omS2.png ||
|| 1984 || [http://ruletablerepository.googlecode.com/files/Snowflake-gen.py Snowflake-gen.py] || A script for generating examples of Norman Packard's snowflake-like CA, described in [http://www.scipress.org/e-library/sof/pdf/0095.PDF this 1986 paper].  An earlier description appears in Stephen Wolfram's article "Computer Software in Science and Mathematics" in Scientific American, Sept. 1984. || http://ruletablerepository.googlecode.com/files/snowflake.png ||
|| 1997 || [http://ruletablerepository.googlecode.com/files/Hex-B2oS2m34.zip Hex-B2oS2m34] || A 2-state non-totalistic CA on a hexagonal grid, by Paul Callahan.  See Paul's excellent [http://www.radicaleye.com/lifepage/hexrule.txt article] describing the notation used in the rule name, and the many interesting objects he discovered (some are included in the zip file). || http://ruletablerepository.googlecode.com/files/Hex-B2oS2m34.png ||
|| 2003 || [http://ruletablerepository.googlecode.com/files/HexBuss.zip HexBuss] || A 3-state totalistic CA on a hexagonal grid, by Frank Buss. See Frank's [http://www.frank-buss.de/automaton/hexautomaton.html website] for more details. || http://ruletablerepository.googlecode.com/files/HexBuss.png ||

== Triangular neighborhood ==

A triangular grid supports 2 possible neighborhoods. If only shared edges are allowed then each cell has 3 neighbors.  If shared vertices are allowed then each cell has 12 neighbors (this results in more interesting rules).  A triangular neighborhood can be emulated on a square grid by dividing each square into 2 triangles, so a 2-state triangular CA can be emulated using 4 states:

http://ruletablerepository.googlecode.com/files/triangular-emulation.png

|| 1994 || [http://ruletablerepository.googlecode.com/files/TriLife.zip TriLife] || 2-state totalistic CA rules on a triangular grid are emulated by a 4-state CA.  Based on the work by Carter Bays (see this [http://www.cse.sc.edu/~bays/trilife3/home.html applet]).  The zip file includes a script for generating !TriLife-Bnnn...Snnn... rules, some example rules and patterns, a .icons file, and another script that counts the number of triangles in a !TriLife pattern. || http://ruletablerepository.googlecode.com/files/TriLife.png ||

For the general case, an emulation script is now available for rule tables that use the `triangularVonNeumann` neighborhood (see RoadMap): [http://ruletablerepository.googlecode.com/files/emulate_triangularVonNeumann_table.zip emulate_triangularVonNeumann_table.zip]. 

== Langton's Ant and other Turing Machines ==

These cellular automata simulate Turing Machines, abstract entities that move on a discrete grid, altering the grid and changing direction. In the classical sense, a Turing machine uses a 1-dimensional grid; Langton's Ant uses a 2-dimensional grid.

|| 1986 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Langtons-Ant.table Langtons-Ant.table] || Langton's other famous system. An ant moves around an infinite universe, flipping the color of the squares it lands on and turning left or right accordingly. The ant moves chaotically for the first 10 000 steps, before settling into a sequence where it slowly migrates diagonally. This eventual fate is conjectured to be true of any initial setup. [http://en.wikipedia.org/wiki/Langton%27s_ant Wikipedia.] || http://ruletablerepository.googlecode.com/files/langtonsant.PNG ||
|| 1995 || [http://ruletablerepository.googlecode.com/files/Langtons-Ant-nColor.zip n-color extension of Langton's Ant] || A script for creating examples in the n-color extension of Langton's Ant. This package also includes a sample pattern and rule. See the [http://www.youtube.com/watch?v=1X-gtr4pEBU YouTube video]. || http://ruletablerepository.googlecode.com/files/LangtonsAnt-LLRRRLRLRLLR.png ||
|| 1986? || [http://ruletablerepository.googlecode.com/files/Langtons-Ant-Count.table Ant counter] || Langton's Ant can be modified to count in binary, as shown in this [http://mathworld.wolfram.com/Turmite.html MathWorld article]. It is a special case of a Turmite, or 2-dimensional isotropic Turing machine. It only differs from Langton's Ant in that it moves forwards on a white square, rather than turning left. This 'counting ant' was discovered by Ed Pegg, Jr. || http://ruletablerepository.googlecode.com/files/Turmite-BinaryCounter.png ||
|| 1987 || [http://ruletablerepository.googlecode.com/files/Turmites.zip Turmites] || A [http://en.wikipedia.org/wiki/Turmite Turmite] is a 2D Turing machine; a generalization of Langton's Ant to n states and m colors. || http://ruletablerepository.googlecode.com/files/Turmite8.png ||
|| 1987 || [http://ruletablerepository.googlecode.com/files/AbsoluteTurmites.zip Absolute Turmites] (2D Turing machines) || While turmites store their orientation as part of their state, absolute turmites have no orientation. Fewer interesting examples are known. Included are some examples from [http://wolframscience.com Wolfram's NKS]. More research [http://code.google.com/p/ruletablerepository/wiki/TwoDimensionalTuringMachines here]. || http://ruletablerepository.googlecode.com/files/AbsoluteTurmites_thumbnail.png ||
|| 2006 || [http://ruletablerepository.googlecode.com/files/Iceskater%20for%20Golly%202.0.zip Iceskater] || A rule by Jordan Goldstein: "I wrote a rule table based on an idea I had about 2 years ago. ... It's similar to Langton's ant in that it walks around the board modifying a set of inactive cells; however, it never repeats itself and thus grows forever to become an large white blob of chaos. Enjoy---an explanation is included in the zip file." [http://sourceforge.net/mailarchive/message.php?msg_name=49178558.40409%40gmail.com Email.] It was later spotted that Iceskater is equivalent to Turmite #9 [http://demonstrations.wolfram.com/Turmites/ here]. || http://ruletablerepository.googlecode.com/files/iceskater.PNG ||
|| 2008 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Worm-1040512.table Worm-1040512.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Worm-1042015.table Worm-1042015.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Worm-1042020.table Worm-1042020.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Worm-1252121.table Worm-1252121.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Worm-1525115.table Worm-1525115.table] || Dean Hickerson's implementation of [http://en.wikipedia.org/wiki/Paterson%27s_worms Paterson's Worms] - The hexagonal neighborhood is emulated using the Moore neighborhood. || http://ruletablerepository.googlecode.com/files/patersonsworms.PNG ||
|| 2009 || [http://ruletablerepository.googlecode.com/files/BusyBeaver3.table 3-state Busy Beaver], [http://ruletablerepository.googlecode.com/files/BusyBeaver5.table 5-state Busy Beaver] || Adam P. Goucher has made a program to convert m-state n-symbol Turing machines into Rule Tables. The two example machines are [http://en.wikipedia.org/wiki/Busy_Beaver Busy Beavers], Turing machines that try to write as many '1's as possible before halting. To run each machine in Golly, seed the universe with a single cell of state 2. ||  http://ruletablerepository.googlecode.com/files/busybeaver.PNG ||
|| 2009 || [http://ruletablerepository.googlecode.com/files/Turing-wolfram.zip Wolfram's Turing Machine] || This rule simulates Wolfram's 2-state 3-symbol Turing Machine, which was proven by Alex Smith to be universal. The rule displays all previous states of the machine, not just the current one. || http://ruletablerepository.googlecode.com/files/wolfram.PNG ||

== Life-inspired CAs ==

This section contains rules based on Conway's Game of Life, the most popular CA.

|| 1973 || [http://ruletablerepository.googlecode.com/files/LifeColor_FrancoisBoisson.zip LifeColor] || A colored variant of the Game of Life, by François Boisson. [http://pentadecathlon.com/lifenews/2006/03/colored_life.html link] || http://ruletablerepository.googlecode.com/files/quadlife.PNG ||
|| 2007 || [http://with-logic.co.uk/CA/LifeOnTheEdgeSlope.zip Life on the Edge and Slope] || Franklin T. Adams-Watters [http://groups.google.com/group/comp.theory.cell-automata/browse_thread/thread/0e28e32abda9e77a# described] a CA in which all the action occurs on the edges of a square grid. Each edge can be ON or OFF and has six neighbors, three at each end. An edge is ON in the next generation [http://mathworld.wolfram.com/Iff.html if] exactly two of the edges in its seven edge neighborhood (including the edge itself) are on. Also provided is an implementation of the rule, rotated 45° so that only 2 live states are required. [http://sourceforge.net/mailarchive/forum.php?thread_name=2b80cd370810042354g63ddfd8dv8e852b56f8e929e3%40mail.gmail.com&forum_name=golly-test Email.] || http://ruletablerepository.googlecode.com/files/lifeontheedge.PNG http://ruletablerepository.googlecode.com/files/lifeontheslope.PNG ||
|| 2007 || [http://with-logic.co.uk/CA/LifeHistoryRules.zip History Life rules] || History Life rules performing functions such as highlighting cells that were ever alive and marking cells. Rule by Dave Greene, translation to a table by Adam P. Goucher. [HistoricalLife Read more...] || http://ruletablerepository.googlecode.com/files/historicallife.PNG http://ruletablerepository.googlecode.com/files/lifehistory.PNG ||
|| 2009 || [http://ruletablerepository.googlecode.com/files/simulators.zip Life Pattern Emulators] || Two rules, one by Dean Hickerson and one by Adam P. Goucher, designed to simulate two of Dean Hickerson's transcendental Life patterns - the Clouds pattern and Prime number generator, respectively. Included are the rule tables, sample patterns and equivalent Life patterns. || http://ruletablerepository.googlecode.com/files/clouds.PNG ||

== Miscellaneous ==

If there is a rule that doesn't fit into one of the above sections, nor does it warrant its own section, it goes here.

|| 1970 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Ed-rep.tree Ed-rep] || In 1970, Terry Winograd [http://hdl.handle.net/1721.1/5843 proved] that Fredkin's replicator CA (the parity rule B1357/S1357) could be extended to N states, as long as N is a prime number. Golly's demo pattern <a href="http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Patterns/Other-Rules/Ed-rep.rle">Ed-rep.rle</a> shows a 7-color photo of Ed Fredkin that replicates itself.|| http://ruletablerepository.googlecode.com/files/Ed-rep.png ||
|| 1987 || [http://ruletablerepository.googlecode.com/files/Sandpile.zip Bak-Tang-Wiesenfeld sandpile model] || A simple 2D model of a sandpile was found to self-organize itself to criticality. [http://en.wikipedia.org/wiki/Bak-Tang-Wiesenfeld_sandpile Wikipedia] || http://ruletablerepository.googlecode.com/files/BTWSandpile.png ||
|| 1989 || [http://ruletablerepository.googlecode.com/files/CyclicCA.table Cyclic CA] || A rule investigated by David Griffeath. This rule is a very basic CA that shows competition emerging from a random initial seed. [http://en.wikipedia.org/wiki/Cyclic_cellular_automaton Wikipedia.] || http://ruletablerepository.googlecode.com/files/cca.PNG ||
|| 1998 || [http://ruletablerepository.googlecode.com/files/JustFriends.table Just Friends] || A non-totalistic 2D binary rule by David Bell. || http://ruletablerepository.googlecode.com/files/justfriends.PNG ||
|| 2009 || [http://ruletablerepository.googlecode.com/files/TrickyBees.zip Tricky Bees] || A chaotic rule by Alan Tennant where each state becomes progressively more inert in which patterns are surprisingly tricky to construct. This table is actually 17 independent rules, which are combined into one rule table using an 'on' state for each rule. || http://ruletablerepository.googlecode.com/files/trickybees.PNG ||
|| 2009 || [http://ruletablerepository.googlecode.com/files/MazeSolver.zip Maze Solver] || A 13-state rule table that solves any maze, using a flood fill method to locate the exit, before backtracking to the start to highlight the shortest possible route. This rule comes complete with a set of icons. || http://ruletablerepository.googlecode.com/files/mazesolver.PNG ||
|| 2009 || [http://ruletablerepository.googlecode.com/files/CollatzConjecture.zip Collatz emulator] || Dean Hickerson created this rule table for determining the number of iterations required for each positive integer to reach 1 in the [http://en.wikipedia.org/wiki/Collatz_conjecture Collatz conjecture]. It is alternatively known as the 3n+1 conjecture or Ulam's conjecture. Coincidentially, Stanislaw Ulam  inspired von Neumann to create cellular automata. || http://ruletablerepository.googlecode.com/files/CollatzCA.png ||

----


= Credits: =

  * Langton's Loops, SDSR, Evoloop, Byl, Chou-Reggia 1/2: TJH used the fabulously readable implementation here: [http://necsi.org/postdocs/sayama/sdsr/java/loops.java loops.java], with kind permission from Eli Bachmupsky and Hiroki Sayama. For SDSR and Evoloop, the rule tables were augmented with Java code, so the conversion routine linked-to above was used. In the Byl loop their rule table has an error: transitions 212052 and 212055 contradict each other - only the second is correct.
  * Banks, Tempesti: TJH copied the rules from their PhD theses, which you can find online
  * Codd: The XLife file linked above was the only record TJH could find. He converted it by hand. Update: He has just found a link to the scanned book (above), and it turns out that codd.r had a few crucial errors. It all works now.
  * !JvN29, Nobili32, Hutton32, !WireWorld: TJH started with the C++ implementations in Golly and used the conversion routine.
  * Langtons-Ant: TJH wrote by hand.
  * BBM: When TJH realised that we could emulate the Margolus neighborhood he wrote a [http://golly.cvs.sourceforge.net/viewvc/golly/golly/src/Scripts/Python/Margolus/convert-MCell-string.py?view=markup Python script] to convert from an [http://psoup.math.wisc.edu/mcell/rullex_marg.html MCell specification string] to a .table file. 
  * HPP: TJH was all set to make an emulated-Margolus rule for the HPP gas (since MCell has the specification) but then he came across a much nicer way of implementing it directly in a von Neumann neighborhood CA, so he followed that instead. He had to create reflection states, so it ended up with 34 states in total.
  * Perrier: Gianluca Tempesti sent TJH the rule table - thanks!
  * MRM: APG converted this rule from Paul Chapman's website.
  * WWE1, WWE2, WSwitch & Tricky Bees by Alan Tennant.
  * WWEJ and WWEJ2 by Mark Jeronimus.
  * WWEJ3 by Alan Tennant and Mark Jeronimus.
  * Emulators: Thanks to Andrew Trevorrow for cleaning up the files to work on case-sensitive file systems.
  * Codd-ICRA: Adam P. Goucher copied this rule from the .pdf document, amended and updated it.
  * Bak-Tang-Wiesenfeld sandpile model: created by Paul Nasca