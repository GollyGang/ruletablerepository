#summary The rule tables in our repository.

<p align="right">[http://code.google.com/p/ruletablerepository/source/list?path=/wiki/TheRules.wiki Detailed page changes]</p>

----

<h1>Contents:</h1>

<wiki:toc max_depth="2" />

----

= The Rule Tables: =

== Von Neumann's CA and close variations ==

Von Neumann, famous for inventing parallel processing and the concept of storing data and instructions in the same tape, created the first cellular automaton in order to allow self-replication. Since then, Renato Nobili and Tim Hutton have successively augmented the rules to simplify the machines.

|| *year* || *rule tables available* || *description* || *images ||
|| late 1940's || [http://www.sq3.org.uk/files/JvN29.table JvN29.table] || John von Neumann's [http://en.wikipedia.org/wiki/Von_Neumann_universal_constructor original 29-state CA]. The rule is very complex, requiring both ordinary and special transmission states, each in the four cardinal directions, both quiescent and excited. The rule also has an extra set of temporary states for construction. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/jvn29.PNG ||
|| 1994 ||  [http://www.sq3.org.uk/files/Nobili32.table Nobili32.table] || [http://www.pd.infn.it/~rnobili/au_cell/ Renato Nobili]'s extension of von Neumann's 29-state CA to allow easier crossing of wires, leading to enormously simpler machines. Golly includes four configurations in this rule. Adam P. Goucher has built a [http://ruletablerepository.googlecode.com/files/linear-constructor.zip fast replicator], which only takes 2.08 million generations to replicate. [Nobili32 Read more...] ||  http://myweb.tiscali.co.uk/calcy/life/rulesimg/nobili32.PNG ||
|| 2008 || [http://www.sq3.org.uk/files/Hutton32.table Hutton32.table] || This is a [http://www.sq3.org.uk/wiki.pl?ModJvN modification] of Nobili32 that Tim Hutton came up with, to allow simpler construction and rotational invariance. This enables the replicator to construct two copies, perpendicular to each other, so that the replicator grows like a binary tree. Space limitations prevent this from growing exponentially, so it grows quadratically (the fastest possible growth). [Hutton32 Read more...] || http://myweb.tiscali.co.uk/calcy/life/rulesimg/hutton32.PNG ||

== Codd's CA and descendents ==

Codd produced a much simpler CA to Von Neumann's original 29-state rule, allowing rotational invariance. [CoddsDesign His design] for a self-replicating machine is much more complex, and Tim Hutton has only recently implemented it. Adam P. Goucher made [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Patterns/Other-Rules/Codd/Goucher-replicator.rle.gz a universal constructor] (but not computer) that replicates much faster.

|| 1968 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Codd.table Codd.table] || Edgar F. Codd simplified von Neumann's CA to 8 states. This is achieved by using a sheath to cover the signal wires, to remove the need for directional arrows. Unfortunately, this means that wires have to be spaced out more than wires in Von Neumann's CA. [http://www.addebook.com/it/uncategorized/cellular-automata_5471.html Codd's book.] [http://en.wikipedia.org/wiki/Codd%27s_cellular_automaton Wikipedia] || http://myweb.tiscali.co.uk/calcy/life/rulesimg/codd.PNG ||
|| 1971 || [http://myweb.tiscali.co.uk/calcy/life/Codd-ICRA.zip Codd-ICRA] || A team of Hungarian researchers modified Codd's rules ([http://www.inf.u-szeged.hu/actacybernetica/edb/vol03n2/pdf/Takacs_1977_ActaCybernetica.pdf paper]). Crossovers can be made with only nine cells, and gates can be constructed by passing 7-0 signals. This rule table is not the original ruleset, but rather the Codd-ICRA rule with TJH's safe sheathing transitions (see Codd2.table, below). There are three pattern files attached that demonstrate the advantages of the Codd-ICRA variant. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/codd-icra.PNG ||
|| 1973 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Devore.table Devore.table] || John Devore altered Codd's ruleset to allow for more compact machines. The main difference between Devore's and Codd's cellular automata is that Devore's allows 2x2 blocks of cells to behave like split devices, merge units or one-way diodes. With this rule, a much simpler crossing can be created. Golly has a functioning self-replicator in this ruleset: [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Patterns/Other-Rules/Codd/Devore/Devore-rep.rle Devore-rep.rle].  Additionally, Adam P. Goucher made another replicator that uses a weak form of run-length encoding to compress the size of the tape: [http://myweb.tiscali.co.uk/calcy/life/devore/D-compressed-replicator.gz D-compressed-replicator.gz]. However, he did not have access to the small crossing, so had to make a large, cumbersome one instead! || http://myweb.tiscali.co.uk/calcy/life/rulesimg/devore.PNG ||
|| 2009 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Codd2.table Codd2.table] || It was recently realised that Codd's rule table required three extra transitions in order to be able to sheath large complex structures. With this rule, an implementation of Codd's self-replicating machine was created: [http://ruletablerepository.googlecode.com/files/Codd-self-rep.zip Codd-self-rep.zip (12MB)] (now contains the full tapes for self-rep!) In addition to this, [http://ruletablerepository.googlecode.com/files/Codd-linear-rep.zip a replicator] has been built in this rule that uses a repeater-emitter loop, similar to [Hutton32 Hutton's replicator]. It takes less than one billion generations to replicate. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/codd2.PNG ||

== Self-replicating loops ==

Christopher Langton altered Codd's ruleset, relinquishing the universality to allow simple self-replicating loops. Several rules have been made to either:

  * Re-introduce the computation/construction abilities. (Tempesti, Perrier)
  * Allow a further reduction in size (Byl-loop, Chou-Reggia-1, Chou-Reggia-2)
  * Simulate evolution and genetic mutation. (SDSR, Evoloop, Sexyloop)

|| 1984 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Langtons-Loops.table Langtons-Loops.table] || Chris G. Langton extended Codd's rules to allow a totally novel form of simple self-replicator - [http://en.wikipedia.org/wiki/Langton%27s_loops the loop]. This was based on a very simple element of Codd's CA - the periodic emitter. The instructions for extending and turning the pseudopod is simpler in Langton's loops than Codd's CA - it requires half as many pulses to extend and turn the arm. This comes at the expense of removing the ability for universal computation and construction. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/langtonsloops.PNG ||
|| 1989 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Byl-Loop.table Byl-Loop.table] || J. Byl managed to reduce the size of Langton's Loop. Whereas Langton's loop consists of an internal and external sheath, the Byl loop only requires an external sheath. This reduced the size of the replicator from 86 to just 12 live cells. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/bylloop.PNG ||
|| 1993 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Chou-Reggia-1.table Chou-Reggia-1.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Chou-Reggia-2.table Chou-Reggia-2.table] || A further reduction of Langton's Loops - down to just five cells. This is a modification of Byl's loop that doesn't even need an external sheath. However, the simplicity of it makes it difficult to identify it as a loop. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/choureggia.PNG ||
|| 1995 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Tempesti.table Tempesti.table] || Gianluca Tempesti's programmable loop that is capable of constructing various things inside itself  - for example the initials of Tempesti's group: "LSL". [http://carg2.epfl.ch/Teaching/GDCA/loops-thesis.pdf Tempesti's thesis.] || http://myweb.tiscali.co.uk/calcy/life/rulesimg/tempesti.PNG ||
|| 1996 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Perrier.table Perrier.table] || Perrier added universal computation capabilities to Langton's loop by adding a program stack and an extensible data tape. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/perrier.PNG ||
|| 1998 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/SDSR-Loop.table SDSR-Loop.table] || Hiroki Sayama introduced a change to Langton's Loops that caused dead loops to disappear, allowing live ones to reproduce further. [http://necsi.org/postdocs/sayama/sdsr/movies/sdsr-dth.html Homepage.] || http://myweb.tiscali.co.uk/calcy/life/rulesimg/sdsr.PNG ||
|| 1999 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Evoloop.table Evoloop.table] || Another loop from Sayama, that allows colliding loops to sometimes merge genetic content. Over time, smaller loops appear as these outcompete the larger ones. [http://necsi.org/postdocs/sayama/sdsr/movies/evol-rep.html Homepage.] || http://myweb.tiscali.co.uk/calcy/life/rulesimg/evoloop.PNG ||
|| 2009 || [http://myweb.tiscali.co.uk/calcy/life/GoucherLoops.zip Goucher's Loops] || A 24-state version of Langton's loops, that permits construction and computation universality, right turns as well as left turns, genome combination and competition. In this rule, smaller loops do not necessarily survive better; square loops are very fragile, whereas crosses are more resilient. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/goucherloops.PNG ||

== !WireWorld and derivatives ==

Brian Silverman's WireWorld rule is available here, together with some interesting modifications by Alan Tennant.

|| 1987 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/WireWorld.table WireWorld.table] || Brian Silverman's famous CA for electronic wiring. This uses four states and can compute any finite calculation (like Banks-I). The memory is restricted to the size of the initial configuration, so it cannot expand its circuitry. However, an impressive computer has been built that calculates 16-bit prime numbers. [WireWorld Read more...] || http://myweb.tiscali.co.uk/calcy/life/rulesimg/wireworld.PNG ||
|| 2009 || [http://myweb.tiscali.co.uk/calcy/life/wireworld-extendable.zip Extendable WireWorld Rule] || A 17-state rule created by Alan Tennant to support universal computation and construction. Unlike the original WireWorld rule, this rule supports self-replication. APG has included 3 of his replicators in this file (serial tape, 16-layer tape and 64-layer tape). The machines with thicker tapes are larger, but faster. A simple pattern is also included that draws the 'Golly' logo. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/wwe.PNG ||
|| 2009 || [http://myweb.tiscali.co.uk/calcy/life/wireworld-extendable-2.zip Extendable WireWorld 2] || A 23-state modification of the Extendable WireWorld rule, again by Alan Tennant. This rule differs from the previous one in many respects. Firstly, complete self-destruction is possible. Secondly, original WireWorld circuits function identically in this rule. Finally, self-modification is much easier. The sample configurations, including a universal computer-constructor programmed to calculate Fibonacci numbers, demonstrate these features. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/wwe2.PNG ||
|| 2009 || [http://myweb.tiscali.co.uk/calcy/life/switch.zip Switch CA] || A 5-state rule by Alan Tennant. The rule is based on WireWorld, but has been designed so that the construction of logic gates is impossible. Instead, pulse dividers are possible. More interestingly, two of these pulse dividers can be coupled so that an incoming pulse exits on one output path or another, depending on the polarisation of the switch. Each input pulse flips the polarisation. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/switch.PNG ||

== Other computation rules ==

This section contains rule tables specifically used to simulate computers. These support logic gates and storage devices easily, making them useful rules for testing logic circuits in a controlled and efficient manner. A potential logic circuit could be designed in a CA to test the schematic without having to consider the layout of the electronic circuit itself.

|| 1971 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Banks-I.table Banks-I.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Banks-II.table Banks-II.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Banks-III.table Banks-III.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Banks-IV.table Banks-IV.table] || [http://www.bottomlayer.com/bottom/banks/banks_commentary.htm Edwin Roger Banks] made CA that supported universal computation and construction, using fewer states than before. The first of these rules allows any finite computation to be calculated (equivalent to WireWorld). The second rule allows a finite starting configuration to have unbounded memory. The third rule is equivalent to the second rule, but it uses the Moore neighbourhood to reduce the number of states to just two. The fourth rule allows universal construction, hence replication. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/banks.PNG ||
|| 2009 || [http://myweb.tiscali.co.uk/calcy/life/MinskyCA.zip MRM CA] || A [http://www.igblan.free-online.co.uk/igblan/ca/camrm.html 4-state rule] made by Paul Chapman to support Minsky Register Machines, up to and including universal MRMs. Included with this rule table is a .colors file and a sample MRM. The supplied MRM, also by Paul Chapman, calculates the nth prime. Paul Chapman has also built MRMs in Life, but they are naturally much slower than the ones in this specialised rule. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/minsky.PNG ||

== Lattice gases ==

A lattice gas is a cellular automaton used specifically to simulate a gas. Whereas actual gases operate in a 3-dimensional continuous space, lattice gases use a 2-dimensional discrete space. Interestingly, most of the properties of actual gases can be observed in lattice gases.

|| 1973 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/HPP.table HPP.table] || The HPP lattice gas can be simulated in the Margolus rule, but [http://pages.cs.wisc.edu/~wylie/doc/PhD_thesis.pdf Brian Wylie] showed how to simulate it with 16 states and the von Neumann neighbourhood. TJH added another 16 'reflection' states to allow the rule to function in a bounded, non-toroidal space. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/hpp.PNG ||
|| 1981 || [http://myweb.tiscali.co.uk/calcy/life/DLA.zip Diffusion-limited aggregation] || [http://en.wikipedia.org/wiki/Diffusion-limited_aggregation Diffusion-limited aggregation] using the HPP lattice gas. This model was studied to simulate the fractal growth characterised by electrolysis of copper sulphate. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/dla.PNG ||

== Margolus neighbourhood ==

The Margolus neighbourhood is one of the simplest CA neighbourhoods. A description of the rule can be found online, at [http://cell-auto.com/neighbourhood/margolus/ this website]. For each of the rules below, two different rule tables are supplied. One is the actual Margolus rule; the other is an emulation of it using a Moore neighbourhood and extra states.

|| 1981 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/DLA-Margolus.table DLA-Margolus.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/DLA-Margolus-emulated.table DLA-Margolus-emulated.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/DLA-Margolus-emulated.colors DLA-Margolus-emulated.colors] || [http://en.wikipedia.org/wiki/Diffusion-limited_aggregation Diffusion-limited aggegation] in the Margolus neighbourhood. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/dla2.PNG ||
|| 1982 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/BBM-Margolus.table BBM-Margolus.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/BBM-Margolus-emulated.table BBM-Margolus-emulated.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/BBM-Margolus-emulated.colors BBM-Margolus-emulated.colors] || Ed Fredkin's [http://en.wikipedia.org/wiki/Billiard-Ball_Computer Billiard Ball Model] in the Margolus neighbourhood. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/bbm.PNG ||
|| 2009 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Sand-Margolus.table Sand-Margolus.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Sand-Margolus-emulated.table Sand-Margolus-emulated.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Sand-Margolus-emulated.colors Sand-Margolus-emulated.colors] || MCell's 'Sand' rule in the Margolus neighbourhood. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/sand.PNG ||

== Langton's Ant and other Turing Machines ==

These cellular automata simulate Turing Machines, abstract entities that move on a discrete grid, altering the grid and changing direction. In the classical sense, a Turing machine uses a 1-dimensional grid; Langton's Ant uses a 2-dimensional grid.

|| 1986 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Langtons-Ant.table Langtons-Ant.table] || Langton's other famous system. An ant moves around an infinite universe, flipping the colour of the squares it lands on and turning left or right accordingly. The ant moves chaotically for the first 10 000 steps, before settling into a sequence where it slowly migrates diagonally. This eventual fate is conjectured to be true of any initial setup. [http://en.wikipedia.org/wiki/Langton%27s_ant Wikipedia.] || http://myweb.tiscali.co.uk/calcy/life/rulesimg/langtonsant.PNG ||
|| 2006 || [http://ruletablerepository.googlecode.com/files/Iceskater%20for%20Golly%202.0.zip Iceskater] || A rule by Jordan Goldstein: "I wrote a rule table based on an idea I had about 2 years ago. ... It's similar to Langton's ant in that it walks around the board modifying a set of inactive cells; however, it never repeats itself and thus grows forever to become an large white blob of chaos. Enjoy---an explanation is included in the zip file." [http://sourceforge.net/mailarchive/message.php?msg_name=49178558.40409%40gmail.com Email.]|| http://myweb.tiscali.co.uk/calcy/life/rulesimg/iceskater.PNG ||
|| 2008 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Worm-1040512.table Worm-1040512.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Worm-1042015.table Worm-1042015.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Worm-1042020.table Worm-1042020.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Worm-1252121.table Worm-1252121.table], [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Worm-1525115.table Worm-1525115.table] || Dean Hickerson's implementation of [http://en.wikipedia.org/wiki/Paterson%27s_worms Paterson's Worms] - The hexagonal neighbourhood is emulated using the Moore neighbourhood. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/patersonsworms.PNG ||
|| 2009 || [http://myweb.tiscali.co.uk/calcy/life/turing-machines/BusyBeaver3.table 3-state Busy Beaver], [http://myweb.tiscali.co.uk/calcy/life/turing-machines/BusyBeaver5.table 5-state Busy Beaver] || Adam P. Goucher has made a program to convert m-state n-symbol Turing machines into Rule Tables. The two example machines are [http://en.wikipedia.org/wiki/Busy_Beaver Busy Beavers], Turing machines that try to write as many '1's as possible before halting. To run each machine in Golly, seed the universe with a single cell of state 2. ||  http://myweb.tiscali.co.uk/calcy/life/rulesimg/busybeaver.PNG ||
|| 2009 || http://ruletablerepository.googlecode.com/files/Langtons-Ant-nColor.zip || Tim Hutton's script for creating n-coloured analogues of Langton's Ant. This package also includes a sample pattern and rule. See the [http://www.youtube.com/watch?v=1X-gtr4pEBU YouTube video]. || Awaiting image... ||


== Life-inspired CAs ==

This section contains rules based on Conway's Game of Life, the most popular CA.

|| 1973 || [http://ruletablerepository.googlecode.com/files/LifeColor_FrancoisBoisson.zip LifeColor] || A colored variant of the Game of Life, by François Boisson. [http://pentadecathlon.com/lifenews/2006/03/colored_life.html link] || http://myweb.tiscali.co.uk/calcy/life/rulesimg/quadlife.PNG ||
|| 2007 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/LifeOnTheEdge.tree LifeOnTheEdge.tree] || Franklin T. Adams-Watters [http://groups.google.com/group/comp.theory.cell-automata/browse_thread/thread/0e28e32abda9e77a# described] a CA in which all the action occurs on the edges of a square grid.  Each edge can be on or off and has six neighbors, three at each end.  An edge is on in the next generation [http://mathworld.wolfram.com/Iff.html iff] exactly two of the edges in its seven edge neighborhood (including the edge itself) are on. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/lifeontheedge.PNG ||
|| 2007 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/LifeOnTheSlope.tree LifeOnTheSlope.tree] || An implementation of the above rule, rotated 45° so that only 2 live states are required. [http://sourceforge.net/mailarchive/forum.php?thread_name=2b80cd370810042354g63ddfd8dv8e852b56f8e929e3%40mail.gmail.com&forum_name=golly-test Email.] || http://myweb.tiscali.co.uk/calcy/life/rulesimg/lifeontheslope.PNG ||
|| 2007 || [http://ruletablerepository.googlecode.com/files/HistoricalLife.zip Historical Life] || An implementation of the classic game of life that highlights the cells that were ever alive. Rule by Dave Greene, translation to a table by Adam P. Goucher. [HistoricalLife Read more...] || http://myweb.tiscali.co.uk/calcy/life/rulesimg/historicallife.PNG ||
|| 2008 || [http://ruletablerepository.googlecode.com/files/LifeHistoryRules.zip Life History and related rules] || A five-state extension of the HistoricalLife rule originally by Brice Due.  The LifeHistory rule includes optional "marked cells" as well as history cells.  Archive also includes an optimized version of HistoricalLife with a colorset to match LifeHistory, and several support scripts for both rules. [LifeHistory Read more...] || http://myweb.tiscali.co.uk/calcy/life/rulesimg/lifehistory.PNG ||
|| 2009 || [http://myweb.tiscali.co.uk/calcy/life/simulators.zip Life Pattern Emulators] || Two rules, one by Dean Hickerson and one by Adam P. Goucher, designed to simulate two of Dean Hickerson's transcendental Life patterns - the Clouds pattern and Prime number generator, respectively. Included are the rule tables, sample patterns and equivalent Life patterns. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/clouds.PNG ||

== Miscellaneous ==

If there is a rule that doesn't fit into one of the above sections, nor does it warrant its own section, it goes here.

|| 1970 || [http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Rules/Ed-rep.tree Ed-rep] || In 1970, Terry Winograd [http://hdl.handle.net/1721.1/5843 proved] that Fredkin's replicator CA (the parity rule B1357/S1357) could be extended to N states, as long as N is a prime number. Golly's demo pattern <a href="http://golly.cvs.sourceforge.net/viewvc/*checkout*/golly/golly/src/Patterns/Other-Rules/Ed-rep.rle">Ed-rep.rle</a> shows a 7-color photo of Ed Fredkin that replicates itself.|| http://ruletablerepository.googlecode.com/files/Ed-rep.png ||
|| 1989 || [http://myweb.tiscali.co.uk/calcy/life/CyclicCA.table Cyclic CA] || A rule investigated by David Griffeath. This rule is a very basic CA that shows competition emerging from a random initial seed. [http://en.wikipedia.org/wiki/Cyclic_cellular_automaton Wikipedia.] || http://myweb.tiscali.co.uk/calcy/life/rulesimg/cca.PNG ||
|| 1998 || [http://myweb.tiscali.co.uk/calcy/life/JustFriends.table Just Friends] || A non-totalistic 2D binary rule by David Bell. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/justfriends.PNG ||
|| 2009 || [http://myweb.tiscali.co.uk/calcy/life/TrickyBees.zip Tricky Bees] || A chaotic rule by Alan Tennant where each state becomes progressively more inert in which patterns are surprisingly tricky to construct. This table is actually 17 independent rules, which are combined into one rule table using an 'on' state for each rule. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/trickybees.PNG ||
|| 2009 || [http://ruletablerepository.googlecode.com/files/MazeSolver.zip Maze Solver] || A 13-state rule table that solves any maze, using a flood fill method to locate the exit, before backtracking to the start to highlight the shortest possible route. This rule comes complete with a set of icons. || http://myweb.tiscali.co.uk/calcy/life/rulesimg/mazesolver.PNG ||


----


= Credits: =

  * Langton's Loops, SDSR, Evoloop, Byl, Chou-Reggia 1/2: TJH used the fabulously readable implementation here: [http://necsi.org/postdocs/sayama/sdsr/java/loops.java loops.java], with kind permission from Eli Bachmupsky and Hiroki Sayama. For SDSR and Evoloop, the rule tables were augmented with Java code, so the conversion routine linked-to above was used. In the Byl loop their rule table has an error: transitions 212052 and 212055 contradict each other - only the second is correct.
  * Banks, Tempesti: TJH copied the rules from their PhD theses, which you can find online
  * Codd: The XLife file linked above was the only record TJH could find. He converted it by hand. Update: He has just found a link to the scanned book (above), and it turns out that codd.r had a few crucial errors. It all works now.
  * !JvN29, Nobili32, Hutton32, !WireWorld: TJH started with the C++ implementations in Golly and used the conversion routine.
  * Langtons-Ant: TJH wrote by hand.
  * BBM: When TJH realised that we could emulate the Margolus neighbourhood he wrote a [http://golly.cvs.sourceforge.net/viewvc/golly/golly/src/Scripts/Python/Margolus/convert-MCell-string.py?view=markup Python script] to convert from an [http://psoup.math.wisc.edu/mcell/rullex_marg.html MCell specification string] to a .table file. 
  * HPP: TJH was all set to make an emulated-Margolus rule for the HPP gas (since MCell has the specification) but then he came across a much nicer way of implementing it directly in a von Neumann neighbourhood CA, so he followed that instead. He had to create reflection states, so it ended up with 34 states in total.
  * Perrier: Gianluca Tempesti sent TJH the rule table - thanks!
  * MRM: APG converted this rule from Paul Chapman's website.
  * WWE: Supplied by Alan Tennant.
  * Emulators: Thanks to Andrew Trevorrow for cleaning up the files to work on case-sensitive file systems.
  * Codd-ICRA: Adam P. Goucher copied this rule from the .pdf document, amended and updated it.